@page "/AddChatroom"
@using Services
@using Models
@using System.Text.Json
@using global::Models
@using MongoDB.Bson
@inject IAccountService AccountService;
@inject IChatroomService ChatroomService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
<div class="SignUpWrapper">
    <div class="divToMain">
        <a @onclick="@Back" href="#">Return to main page</a>
    </div>
    <div class="chatroomForm">
        <EditForm Model="@newChatroom" OnValidSubmit="@AddNewChatRoom">
            <h3>New chatroom</h3>
            <div class="AddchatroomField">
                Name: <br/>
                <InputText @bind-Value="newChatroom.name"/>
            </div>
            <div>
            </div>
            <button class="ChatroomAdding" type="submit">Add chatroom</button>
        </EditForm>
        <div class="AddchatroomField">
            Topic name: <br/>
            <input type="text" @bind:event="oninput" @bind="@topicName"></input>
        </div>
        <button class="ChatroomAdding" @onclick="@AddTopic">Add topic</button>
    </div>
</div>

@code {

    private Chatroom newChatroom = new Chatroom();
    private User storedUser = new Account();
    private List<Topic> Topics = new List<Topic>();
    private string topicName = "";

    protected override async Task OnInitializedAsync()
    {
        string userAsJson = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentUser");
        if (!string.IsNullOrEmpty(userAsJson))
        {
            storedUser = JsonSerializer.Deserialize<Account>(userAsJson);
            Console.WriteLine(storedUser._id);
        }
        else
        {
            Console.WriteLine("what");
        }
    }

    private async Task AddNewChatRoom()
    {
        newChatroom.owner = storedUser._id;
        ObjectId objectId = ObjectId.GenerateNewId();
        newChatroom._id = objectId.ToString();
        Console.Out.WriteLine(newChatroom._id);
        newChatroom.topics = Topics;
        newChatroom.participants.Add(storedUser);
        newChatroom.owner = storedUser._id;
        newChatroom.type = "public";
        await ChatroomService.CreateChatRoom(newChatroom);
        NavigationManager.NavigateTo("Main");
    }

    private async Task AddTopic()
    {
        Topic _topic = new Topic
        {
            _id = ObjectId.GenerateNewId().ToString(),
            name = topicName
        };
        Topics.Add(_topic);
        topicName = "";
    }

    private async Task Back()
    {
        NavigationManager.NavigateTo("Main");
    }

}