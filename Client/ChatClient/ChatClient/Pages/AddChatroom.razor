@page "/AddChatroom"
@using Services
@using System.Text.Json
@using MongoDB.Bson
@using Microsoft.AspNetCore.Authorization
@inject IAccountService AccountService;
@inject IChatroomService ChatroomService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@attribute [Authorize]

<div class="SignUpWrapper">
    <div class="chatroomForm">
        <EditForm Model="@newChatroom" OnValidSubmit="@AddNewChatRoom">
            <h3>New Chatroom Creation</h3>
            <div class="AddchatroomField">
                Name: <br/>
                <InputText @bind-Value="newChatroom.name"/>
            </div>
            <div>
            </div>
            <button class="ChatroomAdding" type="submit">Add chatroom</button>
        </EditForm>
        <div class="AddchatroomField">
            <p>
                Currently added topics:
                @if (Topics != null)
                {
                    <div class="listWrapper">
                        <ul>
                            @foreach (var item in Topics)
                            {
                                <li>
                                    <b>@item.name</b> <button class="removeA" @onclick="() => RemoveTopic(item.name)">Remove</button>
                                </li>
                            }
                        </ul>
                    </div>
                }
            </p>
            <label style="color:#c03333">@errorMessage</label>
            Topic name: <br/>
            <input type="text" @bind:event="oninput" @bind="@topicName"></input>
        </div>
        <button class="ChatroomAdding" @onclick="@AddTopic">Add topic</button>
        <button class="redirectButton" @onclick="@Back">Return to main page</button>
    </div>
</div>

@code {

    private Chatroom newChatroom = new Chatroom();
    private User storedUser = new Account();
    private List<Topic> Topics = new List<Topic>();
    private string topicName = "";
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        string userAsJson = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentUser");
        if (!string.IsNullOrEmpty(userAsJson))
        {
            storedUser = JsonSerializer.Deserialize<Account>(userAsJson);
            Console.WriteLine(storedUser._id);
        }
        else
        {
            Console.WriteLine("what");
        }
    }

    private async Task AddNewChatRoom()
    {
        newChatroom.owner = storedUser._id;
        ObjectId objectId = ObjectId.GenerateNewId();
        newChatroom._id = objectId.ToString();
        Console.Out.WriteLine(newChatroom._id);
        newChatroom.topics = Topics;
        newChatroom.participants.Add(storedUser);
        newChatroom.owner = storedUser._id;
        newChatroom.type = "public";
        await ChatroomService.CreateChatRoom(newChatroom);
        NavigationManager.NavigateTo("Main");
    }

    private async Task AddTopic()
    {
        if (topicName.Length < 1 || topicName.Length > 20)
        {
            errorMessage = "Topic has to be between 1 and 20 characters long";
        }
        else
        {
            Topic _topic = new Topic
            {
                _id = ObjectId.GenerateNewId().ToString(),
                name = topicName
            };
            Topics.Add(_topic);
            errorMessage = "";
            topicName = ""; 
        }
    }

    private async Task RemoveTopic(string name)
    {
        try
        {
            Topics.Remove(Topics.First(topic => topic.name.Equals(name)));
        }
        catch
        {
        }
    }

    private async Task Back()
    {
        NavigationManager.NavigateTo("Main");
    }

}