@page "/EditProfile"
@using global::Models
@using System.Text.Json
@using Services
@inject IJSRuntime JsRuntime;
@inject IAccountService AccountService;
@inject NavigationManager NavigationManager;

<div class="EditWrapper">
    <EditForm Model="@updatedAccount" OnValidSubmit="@UpdateAccount">
        <DataAnnotationsValidator/>
        
        <div class="EditForm">
            <div class="divToMain">
                <a @onclick="@backToMenu" href="#">Return to main page</a>
                </div>
            <h3>Edit Profile</h3>
            <div class="Edit-Flex">
                <div class="Edit_right">
                    <div class="form-group">
                        E-mail: <br/>
                        <InputText @bind-Value="updatedAccount.email"/>
                        <div class="validate_div">
                            <ValidationMessage For="@(() => updatedAccount.email)"/>
                        </div>
                    </div>
                    <div class="form-group">
                        Username: <br/>
                        <InputText @bind-Value="updatedAccount.Username"/>
                        <div class="validate_div validate_div_username">
                            <ValidationMessage For="@(() => updatedAccount.Username)"/>
                        </div>
                    </div>

                    <div class="form-group">
                        First name:<br/>
                        <InputText @bind-Value="updatedAccount.Fname"/>
                        <div class="validate_div">
                            <ValidationMessage For="@(() => updatedAccount.Fname)"/>
                        </div>
                    </div>
                    <div class="form-group">
                        Last name:<br/>
                        <InputText rows="1"cols="50" @bind-Value="updatedAccount.Lname"/>
                        <div class="validate_div">
                            <ValidationMessage For="@(() => updatedAccount.Lname)"/>
                        </div>
                    </div>

                    <div class="form-group">
                        Password:<br/>
                        <InputText type="password" rows="1"cols="50" @bind-Value="updatedAccount.Pass"/>
                        <div class="validate_div">
                            <ValidationMessage For="@(() => updatedAccount.Pass)"/>
                        </div>
                    </div>
                </div>
                <div class="Edit_Left">
                    <div class="form-group">
                        Topics:<br/>

                        <InputText type="text" class="topicInput" rows="1"cols="50" @bind-Value="@topic"/>
                    </div>
                    <p class="topicError">@topicError</p>
                    <div class="topicButtons">
                        <button @onclick="@addTopic" class="addTopic">Add</button>
                        <button @onclick="@removeTopic" class="removeTopic">Remove</button>
                    </div>
                    <ul>
                        @if (topics!=null)
                        {
                            @foreach (Topic topic in topics)
                            {
                                <li>@topic.name</li>
                            }
                        }
                    </ul>
                </div>
            </div>
            <p class="editError">@error</p>
            <div class="UpdateButtonDiv">
                <button type="submit">Update</button>
            </div>
        </div>
            
        </EditForm>
    
</div>


@code {
    private List<Topic> topics=new List<Topic>();
    private Account updatedAccount = new Account();
    private string error = "";
    private string topic = "";
    private string defaultUsername = "";
    private string topicError = "";
    protected override async Task OnInitializedAsync()
    {
        string userAsJson = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentUser");
        if (!string.IsNullOrEmpty(userAsJson))
        {
            updatedAccount = JsonSerializer.Deserialize<Account>(userAsJson);
        }
        defaultUsername = updatedAccount.Username;
        Console.Out.WriteLine(updatedAccount.Username);
        Account check =  await AccountService.getUser(updatedAccount.Username);
        updatedAccount.Pass = "";
        StateHasChanged();
        if (check.topics != null)
        {
            topics = check.topics;
        }

        Console.Out.WriteLine(updatedAccount._id);
    }

    public async void UpdateAccount()
    {
        error = "Username already in use";
        try
        {
             await AccountService.getUser(updatedAccount.Username);
            if (updatedAccount.Username == defaultUsername)
            {
                error = "";
                await AccountService.editProfile(updatedAccount);
                NavigationManager.NavigateTo("Main");
            }
            else
            {
                error = "Username already in use";
            }
        }
        catch (Exception e)
        {
            error = "";
            await AccountService.editProfile(updatedAccount);
        }
        
        
        
        
    }

    private  void addTopic()
    {
        AccountService.addTopicToProfile(topic,updatedAccount._id);
        Console.Out.WriteLine("Topic length: " + topic.Length);
        if (topic.Length!=0)
        {
            topicError = "";
            topics.Add(new Topic(topic));
        }
        else
        {
            topicError = "Topic field is empty";
        }
        topic = "";
        StateHasChanged();
    }

    private void removeTopic()
    {
        topicError = "";
        List<Topic> removed = topics;
        int countRemoved = 0;
        try
        {
            foreach (var topic1 in removed)
            {
                if (topic1.name.ToLower().Equals(topic.ToLower()))
                {
                    removed.Remove(topic1);
                    countRemoved++;
                }
            }
            if (countRemoved == 0)
            {
                topicError = "Topic is not in the list";
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        topics = removed;
        AccountService.removeTopicFromProfile(topic,updatedAccount._id);
        topic = "";
        StateHasChanged();
    }

    private void backToMenu()
    {
        NavigationManager.NavigateTo("Main",true);
    }
}