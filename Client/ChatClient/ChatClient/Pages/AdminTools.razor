@page "/AdminTools"
@using Microsoft.AspNetCore.Authorization
@using Services
@using System.Text.Json
@inject IChatroomService chatroomService;
@inject IJSRuntime JsRuntime;
@inject IAccountService AccountService;
@inject IChatService ChatService;
@inject NavigationManager Nav;
@attribute [Authorize(Roles = "Admin")]

<div class="container-fluid mr-3 ml-3">
    <div class="row">
        <div class="col-12">
            <h1>Admin Tools</h1>
            <button class="redirectButton" @onclick="GoBack">Go back to hub</button>
        </div>
    </div>
    <div class="row">
        <div class="col-6">
            <h3>All Users</h3>
            <button class="redirectButton" @onclick="GetAllUsers">Get All Users</button>
            <div class="row">
                <div class="col-12">
                    @if (AllUsers.Any())
                    {
                        @foreach (var item in AllUsers)
                        {
                            <p>
                                @item.Username (@item._id) <button class="redirectButton" @onclick="() => DeleteUser(item._id, item.Username)">Delete User</button>
                            </p>
                        }
                    }
                </div>
            </div>
        </div>
        <div class="col-6">
            <h3>All Chatrooms</h3>
            <button class="redirectButton" @onclick="GetAllChatrooms">Get Chatrooms</button>
            <div class="row">
                <div class="col-12">
                    @if (AllChatrooms.Any())
                    {
                        @foreach (var item in AllChatrooms)
                        {
                            <p>
                                @item.name (@item._id)
                                @if (!item.type.Equals("private"))
                                {
                                    <button class="redirectButton" @onclick="() => DeleteChatroom(item._id, item.name)">Delete Chatroom</button>
                                }
                                @if (item.participants.FirstOrDefault() != null)
                                {
                                    @if (item.participants.Exists(users => users._id.Equals(user._id)))
                                    {
                                        <button class="redirectButton" @onclick="() => EnterPrivateChatroom(item._id)">Enter Chatroom</button>
                                    }
@if (!(item.participants.Exists(users => users._id.Equals(user._id))))
{
    <button class="redirectButton" @onclick="() => JoinChatroom(item._id)">Join Chatroom</button>
}
                                }
                                else
                                {
                                    <button class="redirectButton" @onclick="() => JoinChatroom(item._id)">Join Chatroom</button>
                                }
                            </p>
                        }
                    }
                </div>
            </div>
        </div>
        <div class="col-4"></div>
    </div>
</div>

@code {
    private List<User> AllUsers = new List<User>();
    private List<Chatroom> AllChatrooms = new List<Chatroom>();
    private Account user;

    protected override async Task OnInitializedAsync()
    {
        string userAsJson = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentUser");
        if (!string.IsNullOrEmpty(userAsJson))
        {
            user = JsonSerializer.Deserialize<Account>(userAsJson);
        }
    }

    private async Task GetAllUsers()
    {
        HttpClient http = new HttpClient
        {
            BaseAddress = new Uri("https://localhost:5004/accounts")
        };
        try
        {
            AllUsers = JsonSerializer.Deserialize<List<User>>(await http.GetStringAsync(""));
            await InvokeAsync(() => StateHasChanged());
        }
        catch
        {
        }
    }

    private async Task GetAllChatrooms()
    {
        HttpClient http = new HttpClient
        {
            BaseAddress = new Uri("https://localhost:5004/chatrooms")
        };
        try
        {
            AllChatrooms = JsonSerializer.Deserialize<List<Chatroom>>(await http.GetStringAsync(""));
            await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception e)
        {
            Console.Out.WriteLine(e);
        }
    }

    private async Task DeleteUser(string userID, string username)
    {
        try
        {
            bool response = await JsRuntime.InvokeAsync<bool>("confirmationPromt",
                $"Are you sure that you want to delete this account ({user}, {userID})? \n ***WARNING!*** \n This action cannot be undone!");
            if (response)
            {
                List<Chatroom> chatroomBuffer = await chatroomService.GetUsersChatrooms(userID);
                User userBuffer = await AccountService.GetUser(username);
                await AccountService.DeleteProfile(userID);
                await ChatService.ConnectToServer();
                await ChatService.UpdateChatRooms(chatroomBuffer, userBuffer);
                await ChatService.DisconnectFromHub();
                await GetAllUsers();
            }
        }
        catch (Exception e)
        {
            Console.Out.WriteLine(e);
        }
    }

    private async Task DeleteChatroom(string chatroomID, string name)
    {
        bool response = await JsRuntime.InvokeAsync<bool>("confirmationPromt",
            $"Are you sure you want to delete the chatroom: {name}, ({chatroomID})? \n This action cannot be undone!");
        if (response)
        {
            Console.WriteLine("Deleting");
            await chatroomService.DeleteChatroom(chatroomID);
            await GetAllChatrooms();
        }
    }

    private async Task JoinChatroom(string id)
    {
        await chatroomService.JoinChatRoom(id, user._id);
        await EnterChatroom(id);
    }

    private async Task EnterChatroom(string id)
    {
        await chatroomService.SetCurrentChatroom(id);
        Nav.NavigateTo("");
    }

    private async Task GoBack()
    {
        Nav.NavigateTo("main", true);
    }

    private async void EnterPrivateChatroom(string chatroomID)
    {
        HttpClient http = new HttpClient
        {
            BaseAddress = new Uri("https://localhost:5004/chatrooms/")
        };
        try
        {
            Chatroom chatroom = JsonSerializer.Deserialize<Chatroom>(await http.GetStringAsync(chatroomID));
            await chatroomService.SetCurrentChatroom(chatroom._id);
            Nav.NavigateTo("");
        }
        catch (Exception e)
        {
            Console.Out.WriteLine(e);
        }
    }

}