@page "/"
@using Services
@using global::Models
@using ChatClient.Models
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json
@using MongoDB.Bson
@using Tier2.Model
@using Application.Models
@inject ChatService chatService;
@inject IChatroomService chatroomService;
@inject IJSRuntime JsRuntime;
@inject IAccountService AccountService;
@inject NavigationManager Nav;
@attribute [Authorize]
<div class="container-fluid h-100">
    <div class="row h-100">
        <div class="col-2">
            <div class="row h-100 d-flex align-items-end usersidebar">
                <div class="col-12">
                    @if (currentChatroom != null)
                    {
                        @foreach (var item in currentChatroom.participants)
                        {
                            @try
                            {
                                <div class="row user">
                                    <div class="col-12">
                                        <div class="username">
                                            <img class="img-fluid chatProfileImage" src="https://assets.digitalocean.com/articles/alligator/css/object-fit/example-object-fit.jpg"/>
                                            @item.Username
                                            @if (!(item._id.Equals(user._id)))
                                            {
                                                <div style="float: right;" class="btn-group dropright justify-content-end">
                                                    <button type="button" class="optionsButton dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                        ...
                                                    </button>
                                                    <div class="dropdown-menu">
                                                        <button type="button" class="btn-sm" @onclick="(() => AddFriend(item._id))">Add as Friend</button>
                                                        @if (currentChatroom.owner.Equals(user._id) || user.role.Equals("admin"))
                                                        {
                                                            <button type="button" class="menuButton" @onclick="(() => RemoveFromChatroom(item._id))">kick User</button>
                                                        }
                                                    </div>
                                                </div>  
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                            catch (Exception e)
                            {
                            }
                        }
                    }
                    <button class="backButton" @onclick="BackToHub">Back to Hub</button>
                    <button class="leaveButton" @onclick="LeaveChatroom">Leave Chatroom</button>
                </div>
            </div>
        </div>
        <div class="col-10 w-100">
            <div class="row align-self-start titlebar w-100">
                <div class="col-12">
                    <div class="chatroomTitle">
                        @if (currentChatroom != null)
                        {
                            @currentChatroom.name
                        }
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <div class="row h-50 w-100">
                        <div class="messageBox w-100">
                            @if (Messages.Any())
                            {
                                @foreach (var item in Messages)
                                {
                                    <div>
                                        <p>
                                            @if (currentChatroom != null & isConnectedToChatRoom)
                                            {
                                                @item.username
                                            }
                                            : @item.message
                                        </p>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                    <div class="row w-100">
                        <div class="col-12 d-flex align-items-end">
                            <div class="messageFragmentBox">
                                @if (MessageFragments.Any())
                                {
                                    @foreach (var item in MessageFragments)
                                    {
                                        <div style="width: 50%;">
                                            <p style="overflow-x: fragments;">
                                                User
                                                @if (currentChatroom != null)
                                                {
                                                    @item.username
                                                }
                                                is typing: @item.message ......
                                            </p>
                                        </div>
                                    }
                                }
                            </div>
                            <div class="chatBox">
                                <input type="text" @onkeyup="@KeyDown" @bind:event="oninput" @bind="@messageText"/>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    private List<Chatroom> Chatrooms = new List<Chatroom>();
    private Chatroom currentChatroom = null;
    private string messageText;
    private bool isConnectedToChatRoom = false;
    private Account user;
    private Message newMessage = new Message();
    private MessageFragment newMessageFragment = new MessageFragment();
    private List<MessageFragment> MessageFragments = new List<MessageFragment>();
    private List<Message> Messages = new List<Message>();

    protected override async Task OnInitializedAsync()
    {
        string userAsJson = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentUser");
        if (!string.IsNullOrEmpty(userAsJson))
        {
            user = JsonSerializer.Deserialize<Account>(userAsJson);
            await chatService.ConnectToServer();
            Console.WriteLine("Connected to server");
        }
        currentChatroom = chatroomService.GetCurrentChatroom();
        chatService.newMessage += this.DisplayNewMessage;
        chatService.newMessageFragment += this.DisplayNewMessageFragment;
        chatService.chatroomUpdate += this.ChatroomUpdate;
        ConnectToChatRoom();
        GetUsersChatRooms();
    }

    public async Task AddFriend(string userID)
    {
        await AccountService.AddFriend(userID, user);
    }

    public async Task BackToHub()
    {
        currentChatroom = null;
        isConnectedToChatRoom = false;
        await chatroomService.RemoveCurrentChatroom();
        await chatService.DisconnectFromHub();
        MessageFragments = new List<MessageFragment>();
        Messages = new List<Message>();
        Nav.NavigateTo("main");
    }

    public async void ChatroomUpdate(Chatroom chatroom)
    {
        currentChatroom = chatroom;
        if (chatroom == null)
        {
            await BackToHub();
        }
        else
        {
            foreach (var item in chatroom.participants)
            {
                if (item._id.Equals(user._id))
                {
                    await InvokeAsync(() => StateHasChanged());
                    return;
                }
            }
            await BackToHub();
        }
    }

    public async Task RemoveFromChatroom(string UserId)
    {
        await chatroomService.KickFromChatroom(UserId, currentChatroom._id);
    }

    public async Task GetUsersChatRooms()
    {
        Console.WriteLine("What is going on.....");
        Chatrooms = await chatroomService.GetUsersChatrooms(user._id);
        Console.WriteLine(Chatrooms.ToJson());
        Console.WriteLine("Chatrooms are done and so am I");
        await InvokeAsync(() => StateHasChanged());
    }

    public async Task LeaveChatroom()
    {
        chatroomService.LeaveChatRoom(user._id, currentChatroom._id);
        currentChatroom = null;
        isConnectedToChatRoom = false;
        MessageFragments = new List<MessageFragment>();
        Messages = new List<Message>();
    }

    public async Task ConnectToChatRoom()
    {
        await chatService.JoinChatRoom(chatroomService.GetCurrentChatroom()._id);
        isConnectedToChatRoom = true;
        Messages = currentChatroom.messages;
    }

    public async Task sendMessage()
    {
        if (isConnectedToChatRoom)
        {
            Console.WriteLine("Sending message:" + messageText);
            newMessage.message = messageText;
            newMessage.authorID = user._id.ToString();
            newMessage.username = user.Username;
            await chatService.SendMessage(newMessage, currentChatroom._id);
            messageText = "";
            newMessage.message = "";
            newMessageFragment.message = "";
            sendMessageFragment();
        }
    }

    public void sendMessageFragment()
    {
        if (isConnectedToChatRoom)
        {
            newMessageFragment.message = messageText;
            newMessageFragment.authorIdString = user._id;
            newMessageFragment.username = user.Username;
            chatService.SendMessageFragment(newMessageFragment, currentChatroom._id);
        }
    }

    public async void DisplayNewMessage(Message message)
    {
        Messages.Add(message);
        await InvokeAsync(() => StateHasChanged());
    }

    public async void DisplayNewMessageFragment(MessageFragment messageFragment)
    {
        try
        {
            MessageFragments.Remove(MessageFragments.First(fragment => fragment.authorIdString.Equals(messageFragment.authorIdString)));
        }
        catch (Exception e)
        {
        }
        MessageFragments.Add(messageFragment);
        if (messageFragment.message.Equals(""))
        {
            try
            {
                MessageFragments.Remove(MessageFragments.First(fragment => fragment.authorIdString.Equals(messageFragment.authorIdString)));
            }
            catch (Exception e)
            {
            }
        }
        await InvokeAsync(() => StateHasChanged());
    }

    protected void KeyDown(KeyboardEventArgs e)
    {
        if (e.Key.Equals("Enter"))
        {
            sendMessage();
        }
        else if (e.Key.Equals(" ") || e.Key.Equals("Backspace"))
        {
            sendMessageFragment();
        }
    }
}