@page "/"
@using Services
@using global::Models
@using ChatClient.Models
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json
@using MongoDB.Bson
@using Tier2.Model
@inject ChatService chatService;
@inject IChatroomService chatroomService;
@inject IJSRuntime JsRuntime;
@attribute [Authorize]

<div class="row">
    <div class="col-3">
          @if (Chatrooms.Any())
          {
              @foreach (var item in Chatrooms)
              {
                  <div class="row">
                      <div class="cold-12">
                          <button type="button" @onclick="() => JoinChatRoom(item._id)">@item.name</button>
                      </div>
                      </div>
              }
          }
          <div class="row">
              <div class="col-12">
                  <input type="text" @bind="NewChatRoomName" placeholder="Enter Chatroom Name"></input>
                  <button @onclick="CreateChatRoom">Create Chatroom</button>
              </div>
          </div>
    </div>
    <div class="col-6">
        <div class="row">
            <div class="col-12"><h3>@if(currentChatroom != null){@currentChatroom.name <p>|</p> @currentChatroom._id}</h3></div>
        </div>
        <div style="overflow-y: scroll">
            @if (Messages.Any())
            {
                @foreach (var item in Messages)
                {
                    <p>@item.authorID: @item.message</p>
                }
            }
        </div>
        <div style=" position: fixed; bottom: 40px; width: 100%;">
            @if (MessageFragments.Any())
            {
                @foreach (var item in MessageFragments)
                {
                    <div style="width: 50%;">
                        <p style="overflow-x: fragments;">User @item.authorIdString.ToString() is typing: @item.message ......</p>
                    </div>
                }
            }
        </div>
        <div style=" position: fixed; bottom: 0; width: 100%;">
            <input type="text" style="height: 40px; width: 50%;" @onkeyup="@KeyDown" @bind:event="oninput" @bind="@messageText"/>
        </div>
    </div>
    <div class="col-3">
        
    </div>
</div>
@code
{
    private string NewChatRoomName;
    private List<Chatroom> Chatrooms = new List<Chatroom>();
    private Chatroom currentChatroom = null;
    private string messageText;
    private bool isConnectedToChatRoom = false;
    private User user;
    private Message newMessage = new Message(null, null, null);
    private MessageFragment newMessageFragment = new MessageFragment();
    private List<MessageFragment> MessageFragments = new List<MessageFragment>();
    private List<Message> Messages = new List<Message>();

    protected override async Task OnInitializedAsync()
    {
        string userAsJson = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentUser");
        if (!string.IsNullOrEmpty(userAsJson))
        {
            user = JsonSerializer.Deserialize<User>(userAsJson);
            chatService.ConnectToServer();
        }
  
        chatService.newMessage += this.DisplayNewMessage;
        chatService.newMessageFragment += this.DisplayNewMessageFragment;
        GetUsersChatRooms();
    }

    public async Task GetUsersChatRooms()
    {
        Console.WriteLine("What is going on.....");
        Chatrooms = await chatroomService.GetUsersChatrooms(user._id);
        Console.WriteLine(Chatrooms.ToJson());
        Console.WriteLine("Chatrooms are done and so am I");
        await InvokeAsync(() => StateHasChanged());
    }

    public async Task CreateChatRoom()
    {
        Console.WriteLine(user.ToJson());
        Console.WriteLine($"New Chatroom {NewChatRoomName} created by {user.Username} at {DateTime.Now.ToUniversalTime()}.");
        string welcomeMessage = $"New Chatroom {NewChatRoomName} created by {user.Username} at {DateTime.Now.ToUniversalTime()}.";
        Message message = new Message(welcomeMessage, user._id, ObjectId.GenerateNewId().ToString());
        List<Message> messages = new List<Message>();
        List<User> participants = new List<User>();
        participants.Add(user);
        messages.Add(message);
        Chatroom newChatroom = new Chatroom(ObjectId.GenerateNewId().ToString(), NewChatRoomName, participants, messages);
        chatroomService.CreateChatRoom(newChatroom);
        
        NewChatRoomName = "";

        GetUsersChatRooms();
    }
    
    public async Task JoinChatRoom(string ChatroomId)
    {
            Console.WriteLine($"Connected to chatroom: {ChatroomId}");
            currentChatroom = Chatrooms.First(chatroom => chatroom._id.Equals(ChatroomId));
            await chatService.JoinChatRoom(ChatroomId);
            isConnectedToChatRoom = true;
    }
    public void sendMessage()
    {
        if (isConnectedToChatRoom)
        {
            Console.WriteLine("Sending message:" + messageText);
            newMessage.message = messageText;
            newMessage.authorID = user._id.ToString();
            chatService.SendMessage(newMessage, currentChatroom._id);
            messageText = "";
            newMessage.message = "";
            newMessageFragment.message = "";
            sendMessageFragment();
        }
    }

    public void sendMessageFragment()
    {
        if (isConnectedToChatRoom)
        {
            newMessageFragment.message = messageText;
            newMessageFragment.authorIdString = user._id;
            chatService.SendMessageFragment(newMessageFragment, currentChatroom._id);  
        }
    }

    public async void DisplayNewMessage(Message message)
    {
        Messages.Add(message);
        await InvokeAsync(() => StateHasChanged());
    }
    public async void DisplayNewMessageFragment(MessageFragment messageFragment)
    {
        try
        {
            MessageFragments.Remove(MessageFragments.First(fragment => fragment.authorIdString.Equals(messageFragment.authorIdString)));
        }
        catch (Exception e)
        {

        }
        MessageFragments.Add(messageFragment);
        if (messageFragment.message.Equals(""))
        {
            try
            {
                MessageFragments.Remove(MessageFragments.First(fragment => fragment.authorIdString.Equals(messageFragment.authorIdString)));
            }
            catch (Exception e)
            {
                
            }
        }
        await InvokeAsync(() => StateHasChanged());
    }
    protected void KeyDown(KeyboardEventArgs e)
    {
        if (e.Key.Equals("Enter"))
        {
            sendMessage();
        }
        else if(e.Key.Equals(" ") || e.Key.Equals("Backspace"))
        {
            sendMessageFragment();
        }
    }
}