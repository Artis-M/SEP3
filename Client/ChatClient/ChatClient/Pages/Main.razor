@page "/Main"
@using Services
@using Application.Models
@using global::Models
@using System.Text.Json
@using Application.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Tier2.Model
@inject NavigationManager NavigationManager;
@inject IAccountService AccountService;
@inject IChatroomService ChatroomService;
@inject ChatService ChatService;
@inject IJSRuntime JsRuntime;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<div class="wholePage">
<div class="arrange">
    <div class="userProfile">
        <div style="width:300px;margin-bottom: 10px;">
            <h3 class="ProfileText">Profile</h3>
            <div>
                <h5>Username: @storedUser.Username</h5>
            </div>

            <div>
                <h5>First Name: @storedUser.Fname</h5>
            </div>
            <div>
                <h5>Last Name: @storedUser.Lname</h5>
            </div>
            <div>
                <h5>Email: @storedUser.email</h5>
            </div>
        </div>


        <div class="buttons">
            <button class="editButton"@onclick="@((() => EditProfile()))">
                Edit profile
            </button>
            <button class="deleteButton" @onclick="@((() => DeleteProfile()))">
                Delete profile
            </button>
        </div>


    </div>
    <div class="topicsCard">
        <div>
            <h3>Chatrooms by topic</h3>
        </div>
        <div class="flex-row d-flex">
            @if (topics == null || topics.Count == 0)
            {
                <p>You don't have any topics</p>
                <p>Topics can be added in edit page</p>
            }
            else
            {
                <select class="form-control selectpicker" @bind="@filterOption" style="width: 200px;margin-right: 20px">
                    @foreach (var item in topics)
                    {
                        <option>@item.name</option>
                    }
                </select>
                <button @onclick="@FilterChats" class="chatroomSearch">Search</button>
            }

        </div>
        <div class="filteredChatrooms">
            @if (filterCount>0)
            {
                @foreach (var chatroom in filtered)
                {
                    if (verifyIfUserParticipant(chatroom))
                    {
                        <div class="filteredRoom">
                            <p class="align-self-center">
                                @chatroom.name
                            </p>
                            <button @onclick="@JoinChatroom"> Join</button>
                        </div>
                    }
                }
            }
            else
            {
                <p>@filterError</p>
            }
            
        </div>
    </div>
</div>
<div class="chatrooms">

    <h3>Chatrooms</h3>
    <div class="buttons">
        <button class="editButton" @onclick="@((() => AddChatroom()))">
            Add chatroom
        </button>
    </div>

    <div class="chatroomTable">
        @if (Chatrooms == null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else if (!Chatrooms.Any())
        {
            <p>
                <em>No chatrooms are in the system.</em>
            </p>
        }
        else
        {
            @foreach (var item in Chatrooms)
            {
                <div >
                    <button class="chatroomButton" @onclick="@((() => EnterChatroom(@item._id)))">
                        @item.name
                    </button>
                </div>
            }
        }
    </div>
</div>
<div class="arrange">

    <div class="friends">
        <div>
            <h3>Friends</h3>
        </div>
        <div>

            @if (storedUser.friends == null)
            {
                <p>
                    <em>Loading...</em>
                </p>
            }
            else if (!storedUser.friends.Any())
            {
                <p>
                    <em>No friends, chat and make some!</em>
                </p>
            }
            else
            {
                <table class="table">
                    <tbody>
                    @foreach (var item in storedUser.friends)
                    {
                        <tr>
                            <td>@item.Username</td>
                            <td>
                                <button @onclick="@((() => RemoveFriend(item._id)))">
                                    <i class="oi oi-minus" style="color: black"/>
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
        </div>
    </div>
    <div>
        <button class="logoutButton" @onclick="@((() => Logout()))">
            Log out
        </button>
    </div>
</div>
</div>

@code {
    private string filterOption = "";
    private Account storedUser = new Account();
    private int chatroomCount = 0;
    private int friendCount = 0;
    private List<Chatroom> Chatrooms = new List<Chatroom>();
    private List<Chatroom> filtered = new List<Chatroom>();
    private string chatRoomID;
    private List<Topic> topics = new List<Topic>();
    private string filterError="";
    private int filterCount = 0;


    protected override async Task OnInitializedAsync()
    {
        string userAsJson = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentUser");
        if (!string.IsNullOrEmpty(userAsJson))
        {
            storedUser = JsonSerializer.Deserialize<Account>(userAsJson);
        }
        Chatrooms = await ChatroomService.GetUsersChatrooms(storedUser._id);
        Account user = await AccountService.getUser(storedUser.Username);
        topics = user.topics;

    }

    private bool verifyIfUserParticipant(Chatroom chatroom)
    {
        bool check = true;
        
        foreach (var participant in chatroom.participants)
        {
            if (participant._id.Equals(storedUser._id))
            {
                check = false;
                filterCount--;
            }
        }
        if (filterCount!= 0)
        {
            filterError = "There is no such chatroom with this topic";
            Console.Out.WriteLine("Error");
        }
        return check;
    }

    private async void FilterChats()
    {
        try
        {
            filtered = await ChatroomService.getChatroomByTopic(filterOption);
            
            filterCount = filtered.Count;
            if (filterCount == 0)
            {
                filterError = "There are no such chatrooms with this topic";
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
        }
    }

    /*private async Task RemoveTopic(string id)
    {
    //call method to remove topic
    }

    private async Task AddTopic()
    {
    //new page to add a topic?
        NavigationManager.NavigateTo("");
    }*/

    private async Task EnterChatroom(string id)
    {
        await ChatroomService.SetCurrentChatroom(id);
        NavigationManager.NavigateTo("");
    }

    private async Task JoinChatroom()
    {
        await ChatroomService.JoinChatRoom(chatRoomID, storedUser._id);
    }

    public async Task AddChatroom()
    {
        NavigationManager.NavigateTo("AddChatroom");
    }

    public async Task LeaveRoom(string id)
    {
    }

    public async Task RemoveFriend(string id)
    {
    }

    public async Task EditProfile()
    {
        NavigationManager.NavigateTo("EditProfile");
    }

    public async Task DeleteProfile()
    {
        try
        {
            await AccountService.DeleteProfile(storedUser._id);
            ((AuthenticationProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("login");
        }
        catch (Exception e)
        {
            Console.Out.WriteLine(e);
        }
    }

    private async Task Logout()
    {
        try
        {
            ((AuthenticationProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("login");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

}