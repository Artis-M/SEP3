@page "/Main"
@using Services
@using Application.Models
@using global::Models
@using System.Text.Json
@using Application.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Tier2.Model
@inject NavigationManager NavigationManager;
@inject IAccountService AccountService;
@inject IChatroomService ChatroomService;
@inject ChatService ChatService;
@inject IJSRuntime JsRuntime;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<div>

    <div class="loginForm">
        <div class="userProfile">

            <button class="editProfile" @onclick="@((() => EditProfile()))">
                Edit profile
            </button>

            <h1>Profile</h1>
            <div>
                <h3>@storedUser.Username</h3>
            </div>

            <div>
                <h3>@storedUser.Fname</h3>
            </div>
            <div>
                <h3>@storedUser.Lname</h3>
            </div>
            <div>
                <h3>@storedUser.friends</h3>
            </div>
            <div>
                <h6>@storedUser._id</h6>
            </div>
            <div>
                <div>
                    <h4>Joined chatrooms</h4>
                    <p>@chatroomCount</p>
                </div>
                <div>
                    <h4>Friends</h4>
                    <p>@friendCount</p>
                </div>
            </div>

            <button class="deleteProfile" @onclick="@((() => DeleteProfile()))">
                Delete profile
            </button>


        </div>
    </div>
    <div>
        <div>
            <h1>Your topics</h1>
            <button @onclick="@((() => AddTopic()))">
                <i class="oi oi-plus" style="color: black"/>
            </button>
        </div>
        <div>
            @if (storedUser.topics == null)
            {
                <p>
                    <em>Loading...</em>
                </p>
            }
            else if (!storedUser.topics.Any())
            {
                <p>
                    <em>No topics, add some</em>
                </p>
            }
            else
            {
                <table class="table">
                    <tbody>
                    @foreach (var item in Chatrooms)
                    {
                        <tr>
                            <td>@item.name</td>
                            <td>
                                <button @onclick="@((() => RemoveTopic(item._id)))">
                                    <i class="oi oi-minus" style="color: black"/>
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
        </div>
    </div>
    <div>
        <div>
            <h1>Your chatrooms</h1>
            <button @onclick="@((() => AddChatroom()))">
                <i class="oi oi-plus" style="color: black"/>
            </button>
        </div>
        @if (Chatrooms == null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else if (!Chatrooms.Any())
        {
            <p>
                <em>No chatrooms are in the system.</em>
            </p>
        }
        else
        {
            <table class="table">
                <tbody>
                @foreach (var item in Chatrooms)
                {
                    <tr>
                        <td>
                            <button @onclick="@((() => EnterChatroom(@item._id)))">
                                @item.name
                            </button>
                        </td>


                    </tr>
                }
                </tbody>
            </table>
        }
    </div>
    <div>
        <div>
            <h1>Friends</h1>
        </div>
        <div>

            @if (storedUser.friends == null)
            {
                <p>
                    <em>Loading...</em>
                </p>
            }
            else if (!storedUser.friends.Any())
            {
                <p>
                    <em>No friends, chat and make some!</em>
                </p>
            }
            else
            {
                <table class="table">
                    <tbody>
                    @foreach (var item in storedUser.friends)
                    {
                        <tr>
                            <td>@item.Username</td>
                            <td>
                                <button @onclick="@((() => RemoveFriend(item._id)))">
                                    <i class="oi oi-minus" style="color: black"/>
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@code {
    private Account storedUser = new Account();
    private int chatroomCount = 0;
    private int friendCount = 0;
    private List<Chatroom> Chatrooms = new List<Chatroom>();

    protected override async Task OnInitializedAsync()
    {
        string userAsJson = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentUser");
        if (!string.IsNullOrEmpty(userAsJson))
        {
            storedUser = JsonSerializer.Deserialize<Account>(userAsJson);
        }
        Chatrooms = await ChatroomService.GetUsersChatrooms(storedUser._id);
    //chatroomCount = Chatrooms.Count;
    //friendCount = storedUser.friends.Count;
    }

    private async Task RemoveTopic(string id)
    {
    //call method to remove topic
    }

    private async Task AddTopic()
    {
    //new page to add a topic?
        NavigationManager.NavigateTo("");
    }

    private async Task EnterChatroom(string id)
    {
        await ChatroomService.SetCurrentChatroom(id);
        NavigationManager.NavigateTo("");
    }

    public async Task AddChatroom()
    {
    //add new chatroom  
    }

    public async Task LeaveRoom(string id)
    {
    //leave chatroom
    }

    public async Task RemoveFriend(string id)
    {
    }

    public async Task EditProfile()
    {
    //redirect to edit profile page
    }

    public async Task DeleteProfile()
    {
        try
        {
            await AccountService.DeleteProfile(storedUser._id);
            ((AuthenticationProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("login");
        }
        catch (Exception e)
        {
        }
    }

}